require("dotenv").config();
const { Telegraf, Markup } = require("telegraf");
const Product = require("../models/product.model");

const BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;
const bot = new Telegraf(BOT_TOKEN);

// /start komutu: Inline butonlar + isteƒüe baƒülƒ± konum payla≈üƒ±m tu≈üu
bot.start((ctx) => {
  ctx.reply(
    "Ho≈ü geldin! Ne yapmak istersin?",
    Markup.inlineKeyboard([
      [Markup.button.callback("üöÄ Start Chat", "START_CHAT")],
      [
        Markup.button.callback("‚ÑπÔ∏è About", "ABOUT"),
        Markup.button.callback("‚ùì Help", "HELP"),
      ],
    ])
  );

  // Konum payla≈üƒ±mƒ± i√ßin alt klavye (isteƒüe baƒülƒ±)
  ctx.reply(
    "Eƒüer konumunu payla≈ümak istersen a≈üaƒüƒ±daki butonu kullanabilirsin üëá",
    Markup.keyboard([
      [Markup.button.locationRequest("üìç Konumumu Payla≈ü")],
    ]).resize()
  );
});

// üöÄ Start Chat butonu
bot.action("START_CHAT", (ctx) => {
  const user = ctx.from;
  console.log("üìã Kullanƒ±cƒ± Bilgileri:", {
    id: user.id,
    username: user.username,
    first_name: user.first_name,
    last_name: user.last_name,
    language_code: user.language_code,
  });
  ctx.reply(`Merhaba ${user.first_name || "Kullanƒ±cƒ±"}! Sohbet ba≈ülatƒ±ldƒ± ‚úÖ`);
});

// ‚ÑπÔ∏è About butonu
bot.action("ABOUT", (ctx) => {
  ctx.reply(
    "üìÑ Lorem ipsum dolor sit amet, consectetur adipiscing elit. (About i√ßeriƒüi)"
  );
});

// ‚ùì Help butonu
bot.action("HELP", (ctx) => {
  ctx.reply(
    "üÜò Lorem ipsum dolor sit amet, consectetur adipiscing elit. (Help i√ßeriƒüi)"
  );
});

// üìç Konum mesajƒ± yakalama
bot.on("location", (ctx) => {
  const location = ctx.message.location;
  console.log("üìç Kullanƒ±cƒ± konum g√∂nderdi:", {
    latitude: location.latitude,
    longitude: location.longitude,
  });

  ctx.reply(
    `Te≈üekk√ºrler! Konumun alƒ±ndƒ± ‚úÖ\nLat: ${location.latitude}, Lon: ${location.longitude}`
  );
});

//Product
bot.action("PRODUCTS", async (ctx) => {
  try {
    // √úr√ºnleri veritabanƒ±ndan √ßekiyoruz
    const products = await Product.find();

    if (products.length === 0) {
      await ctx.reply("üö´ ≈ûu anda sistemde hi√ß √ºr√ºn bulunmamaktadƒ±r.");
      return;
    }
    const productList = products
      .map((product, index) => {
        return `#${index + 1} ‚û°Ô∏è ${product.name} - ${product.price}‚Ç∫`;
      })
      .join("$");

    await ctx.reply(
      `üìã **√úr√ºn Listesi**: $$${productList}$$Daha fazla bilgi almak i√ßin bir √ºr√ºn se√ßebilirsiniz.`
    );
  } catch (error) {
    console.error("√úr√ºnleri listelerken hata olu≈ütu:", error);

    await ctx.reply(
      "‚ö†Ô∏è √úr√ºnler ≈üu anda y√ºklenemiyor. L√ºtfen biraz sonra tekrar deneyin."
    );
  }
});

// Export edilen sadece bot nesnesi
module.exports = {
  bot,
};
